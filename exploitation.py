import subprocess
from Operations import Operations
class exploitation:
    def __init__(self,end_points=None,requests=None):
        self.end_points=end_points
        self.requests=requests

         
    def XSStrike (self,flags={}):
            errors={}
            print("Starting XSStrike ...\n=======================")
            for end_point in self.end_points:
                domain_name=end_point.split('//')[-1].split('/')[0]
                flags["-u"]=end_point
                str_flags=Operations.dic_to_str(flags,postfix=" ")
                file_name=domain_name + "_" +end_point.split('/')[-1]
                command = f"echo '{end_point}' 1>> exploitation/xsstrike/{file_name}.txt  && python3 XSStrike/xsstrike.py {str_flags} 1>>exploitation/xsstrike/{file_name}.txt 2> /dev/null"
                print(f"[+]End_point: {end_point}")
                print(command)
                proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, start_new_session=True)
                proc.wait()
                #stdout, stderr = proc.communicate()
                #proc.wait()
                # shell return 0 if success, otherwise if fault 
                if proc.returncode:
                    errors[file_name]="Sub Process Error!!"
                # if errors[URL]:
                #     print(f"ERROR: {errors[URL]}")
                # else:
                #     print(f"EndPoints Found.")

            return errors

    def SSRFmap (self,flags={}):
                errors={}
                print("Starting SSRFmap ...\n=======================")
                for request in self.requests:
                    
                    str_flags=Operations.dic_to_str(flags,postfix=" ")
                    

            #python ssrfmap.py -r examples/request.txt -p url -m readfiles,portscan
                    command = f"echo '{end_point}' 1>> exploitation/xsstrike/{file_name}.txt  && python3 XSStrike/xsstrike.py {str_flags} 1>>exploitation/xsstrike/{file_name}.txt 2> /dev/null"
                    print(f"[+]End_point: {end_point}")
                    print(command)
                    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, start_new_session=True)
                    proc.wait()
                    #stdout, stderr = proc.communicate()
                    #proc.wait()
                    # shell return 0 if success, otherwise if fault 
                    if proc.returncode:
                        errors[file_name]="Sub Process Error!!"
                    # if errors[URL]:
                    #     print(f"ERROR: {errors[URL]}")
                    # else:
                    #     print(f"EndPoints Found.")
                return errors









    def lfimap_exploit(self,urls, flags={}):
        vulnerable_urls = []
        errors = {}
        print("Starting LFImap ...\n===================")

        for URL in urls:
            flags["-U"] = URL
            
            str_flags = Operations.dic_to_str(flags, postfix=" ")

            command = f"python3 LFImap/lfimap.py {str_flags} 1>exploitation/lfi_out_put.txt 2> /dev/null"
            print(command)
            print(f"[+] URL: {URL}")

            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, start_new_session=True)
            proc.wait()

            if proc.returncode:
                errors[URL] = "Sub Process Error!!"

        return vulnerable_urls, errors

# Example usage:
# lfi=exploitation()
# urls = ['http://testhtml5.vulnweb.com', 'http://testphp.vulnweb.com']
# vulnerable_urls, lfimap_errors = lfi.lfimap_exploit(urls,{"-w":"wordlist.txt"})

# print(f"Vulnerable URLs \n=================\n{vulnerable_urls}\n")
# print(f"Errors \n=================\n{lfimap_errors}\n")




xss=exploitation(["http://testphp.vulnweb.com/search.php?test=query"])
xss.XSStrike()





############
#########



    

# import subprocess
# from Operations import Operations

# class LFI_map:
#     def _init_(self):
#         self.vulnerable_urls = []

#     # LFImap tool usage example: python3 LFImap.py -u http://example.com/index.php?page=
#     def lfimap(self, flags={}):
#         errors = {}
#         vulnerable_urls = []
#         print("Starting LFImap ...\n===================")
        
#         for URL in self.URLs:
#             flags["-U"] = URL
#             flags["--log"]="output.txt"
#             str_flags = Operations.dic_to_str(flags, postfix=" ")
#             command = f"python3 /path/to/LFImap/LFImap.py {str_flags}1>lfimap_output.txt 2> /dev/null"
#             print(f"[+] URL: {URL}")

#             proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, start_new_session=True)
#             proc.wait()

#             if not proc.returncode:
#                 is_exist = Operations.is_exist(flags["--log"])
#                 if is_exist:
#                     result = Operations.get_file_content(flags["--log"])
#                     if "VULNERABLE" in result:
#                         vulnerable_urls.append(URL)
#                 else:
#                     errors[URL] = "No output found or vulnerability not detected"
#             else:
#                 errors[URL] = "Sub Process Error!!"

#         self.vulnerable_urls += Operations.uniq_list(vulnerable_urls)
#         print()
#         return errors

# # Example usage in main class 
# lfi_map = LFI_map()
# lfi_map.URLs = ['http://testhtml5.vulnweb.com', 'http://testphp.vulnweb.com']
# lfimap_errors = lfi_map.lfimap({"-w": "wordlist.txt"})
# print(f"Vulnerable URLs \n=================\n{lfi_map.vulnerable_urls}\n")