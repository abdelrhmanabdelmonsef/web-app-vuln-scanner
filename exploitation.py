import os
import sys
sys.path.insert(0,os.path.abspath(os.path.join(os.path.dirname(__file__), 'exploitation/')))
import methods
import threads
from groc_ai import groq
from xsstrike import xsstrike
from xspear import xspear
from lfi import lfi
from sqlmap import sqlmap
from nuclei import nuclei

class exploitation():

    def __init__(self, end_points_with_params, threads, delays):
        self.end_points_with_params = end_points_with_params
        self.reports = {'xsstrike': [], 'xspear': [], 'lfi': [], 'sqlmap': [], 'nuclei': []}
        self.tool_reports = {'xsstrike': [], 'xspear': [], 'lfi': [], 'sqlmap': [], 'nuclei': []}
        self.errors={'xsstrike': None, 'xspear': None, 'lfi': None, 'sqlmap': None, 'nuclei': None}
        self.threads=threads
        self.delays=delays
        self.groc_ai=groq()


    def run_xsstrike(self):
        my_xsstrike = xsstrike(self.end_points_with_params, self.threads['xsstrike'], self.delays['xsstrike'])
        my_xsstrike.lxsstrike()
        my_xsstrike_reports = my_xsstrike.reports
        xsstrike_long_ai_report = self.groc_ai.reporting(my_xsstrike_reports,'This is the xsstrike tool ouptut in form endpoint:payload, Create the markdown file that includes all detailed information')
        xsstrike_short_ai_report =  self.groc_ai.reporting(my_xsstrike_reports,'This is the xsstrike tool ouptut in form endpoint:payload, Create the short markdown file that includes important informations')
        self.reports['xsstrike'].append(xsstrike_long_ai_report)
        self.reports['xsstrike'].append(xsstrike_short_ai_report)
        

    def run_xspear(self):
        my_xspear = xspear(self.end_points_with_params,self.threads['xspear'], self.delays['xspear'])
        my_xspear.lxspear()
        my_xspear_reports = my_xspear.reports
        xspear_long_ai_report = self.groc_ai.reporting(my_xspear_reports,'This is the xspear tool ouptut Create the markdown file that includes all detailed information, if many payloads to same parameter, return only one')
        xspear_short_ai_report =  self.groc_ai.reporting(my_xspear_reports,'This is the xspear tool ouptut Create the short markdown file, if many payloads to same parameter, return only one')
        self.reports['xspear'].append(xspear_long_ai_report)
        self.reports['xspear'].append(xspear_short_ai_report)

    def run_lfi(self):
        my_lfi = lfi(self.end_points_with_params,self.threads['lfi'], self.delays['lfi'])
        my_lfi.llfi()
        my_lfi_reports = my_lfi.reports
        lfi_long_ai_report = self.groc_ai.reporting(my_lfi_reports,'This is the local file inclusion tool ouptut Create the markdown file that includes all detailed information, if many payloads to same parameter, return only one')
        lfi_short_ai_report =  self.groc_ai.reporting(my_lfi_reports,'This is the local file inclusion tool ouptut Create the short markdown file, if many payloads to same parameter, return only one')
        self.reports['lfi'].append(lfi_long_ai_report)
        self.reports['lfi'].append(lfi_short_ai_report)

    def run_sqlmap(self):
        my_sqlmap = sqlmap(self.end_points_with_params,self.threads['sqlmap'], self.delays['sqlmap'])
        my_sqlmap.lsqlmap()
        my_sqlmap_reports = my_sqlmap.reports
        sqlmap_ai_report = self.groc_ai.reporting(my_sqlmap_reports,'Create the markdown file that includes all detailed information')
        sqlmap_short_ai_report =  self.groc_ai.reporting(my_sqlmap_reports,'Create the short markdown file that includes important informations')
        self.reports['sqlmap'].append(sqlmap_ai_report)
        self.reports['sqlmap'].append(sqlmap_short_ai_report)


    def run_nuclei(self):
        my_nuclei = nuclei(self.end_points_with_params,self.threads['nuclei'], self.delays['nuclei'])
        my_nuclei.lnuclei()
        my_nuclei_reports = my_nuclei.reports
        nuclei_ai_report = self.groc_ai.reporting(my_nuclei_reports,'Create the markdown file that includes all detailed information')
        nuclei_short_ai_report =  self.groc_ai.reporting(my_nuclei_reports,'Create the short markdown file that includes important informations')
        self.reports['nuclei'].append(nuclei_ai_report)
        self.reports['nuclei'].append(nuclei_short_ai_report)

    def exploitation(self,lst):
        print("am here")
        thread_objects = []
        if 'xsstrike' in lst:
            t = threads.thread(self.run_xsstrike,())
            thread_objects.append(t)

        if 'xspear' in lst:
            t = threads.thread(self.run_xspear,())
            thread_objects.append(t)
        
        if 'lfi' in lst:
            t = threads.thread(self.run_lfi,())
            thread_objects.append(t)
        
        if 'sqlmap' in lst:
            t = threads.thread(self.run_sqlmap,())
            thread_objects.append(t)
        
        if 'nuclei' in lst:
            t = threads.thread(self.run_nuclei,())
            thread_objects.append(t)
        
        threads.join_threads(thread_objects)


# my_threads = {'xsstrike': 1, 'xspear': 1, 'lfi': 1, 'sqlmap': 1, 'nuclei': 1}
# my_delays = {'xsstrike': 0, 'xspear': 0, 'lfi': 0, 'sqlmap': 0, 'nuclei': 0}
# my_end_points_with_params = ['https://0ad60026033986cf891c2ca300d000a6.web-security-academy.net/image?filename=2.jpg']
# my_lst = ['xsstrike','xspear','lfi','sqlmap','nuclei']
# # my_lst = ['xsstrike','xspear','lfi']
# my_exploitation = exploitation(my_end_points_with_params, my_threads, my_delays)
# my_exploitation.exploitation(my_lst)
# for key,value in my_exploitation.reports.items():
#     print(f'#####{key}#####')
#     for item in value:
#         print(item)
# # print(ai_reports)



