import concurrent.futures
import subprocess
from pathlib import Path

def execute_command(command):
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        return f"Error: {e.stderr}"

def scan_endpoint(end_point, threads):
    try:
        command = f"crlfuzz -u {end_point} -c {threads} -s"
        result = execute_command(command)
        return end_point, result
    except Exception as e:
        return end_point, f"Exception: {str(e)}"

def crlf(end_points, max_workers=15, threads=15):
    errors = []
    reports = {}
    print("[●] Vulnerabilities Scanning - CRLF")
    
    crlf_file = Path('vulnerabilities/crlf.txt')
    crlf_file.parent.mkdir(parents=True, exist_ok=True)
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_endpoint = {executor.submit(scan_endpoint, end_point, threads): end_point for end_point in end_points}
        
        for future in concurrent.futures.as_completed(future_to_endpoint):
            end_point = future_to_endpoint[future]
            try:
                endpoint, result = future.result()
                reports[endpoint] = result
                with open(crlf_file, 'a') as f:
                    f.write(f"Endpoint: {endpoint}\n{result}\n\n")
            except Exception as e:
                errors.append(end_point)
                print(f"Exception running CRLF scan on {end_point}: {str(e)}")
    
    print(f"[●] Vulnerabilities Scanned - CRLF\tFound: {len(reports)}")
    return errors, reports
