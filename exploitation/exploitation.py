import subprocess
import os
from Operations import Operations
import json



class exploitation:
    def __init__(self,end_points=None,requests=None):
        self.end_points=end_points
        self.requests=requests



    def XSpear(self, flags={}):
        errors = []
        output_dir = "exploitation/XSpear"
        Operations.mkdir(output_dir)  # Ensure output directory exists
        print("Starting XSpear ...\n=======================")
        reports=[]
        for end_point in self.end_points:
            domain_name = end_point.split('//')[-1].split('/')[0]
            flags["-u"] = f'"{end_point}"'
            flags["-v"]= "0"
            flags["-o"]="json"
            report={}
            str_flags = Operations.dic_to_str(flags, postfix=" ")
            # file_name = domain_name + "_" + end_point.split('/')[-1]
            # output_file = os.path.join(output_dir, f"{file_name}.txt")
            
            command = f"XSpear {str_flags} 2> /dev/null"
        
            try:
                proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, start_new_session=True)
                stdout, stderr = proc.communicate()
                output_lines = stdout.decode('utf-8').strip().split('\n')
              #  print(output_lines)
                report[end_point]=json.loads(output_lines[0])
                reports.append(report)
            except Exception as e:
               errors.append(end_point)
               # errors[file_name] = f"Exception: {str(e)}"
            #   print(f"Exception running XSStrike on {end_point}: {str(e)}")
        return [errors,reports]


    def XSStrike(self, flags={}):
        errors = []
        output_dir = "exploitation/xsstrike"
        Operations.mkdir(output_dir)  # Ensure output directory exists
        print("Starting XSStrike ...\n=======================")
        reports=[]
        for end_point in self.end_points:
            # domain_name = end_point.split('//')[-1].split('/')[0]
            # file_name = domain_name + "_" + end_point.split('/')[-1]
            # file_name=file_name[-30:]
            # #output_file = f"{output_dir}/{file_name}"
            # output_file = os.path.join(output_dir, f"{file_name}.txt")  
            # flags["--log-file"]=output_file
            
            flags["-u"] = f'"{end_point}"'
            
            str_flags = Operations.dic_to_str(flags, postfix=" ")
            
            command = f"python3 XSStrike/xsstrike.py {str_flags} 2> /dev/null"
            
            report={}
            
            try:
                proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, start_new_session=True)
                # proc = subprocess.run(command, shell=True)
                stdout, _ = proc.communicate()
                output_lines = stdout.decode('utf-8').strip().split('\n')
                payloads=[line.split(": ")[-1].split(" ")[0] for line in output_lines if "Vector" in line]
                report[end_point]=payloads
                reports.append(report)
                # if proc.returncode != 0:
                #     errors[file_name] = f"Sub Process Error: {stderr.decode().strip()}"
                #     # print(f"Error running XSStrike on {end_point}: {stderr.decode().strip()}")
                # else:
                #     print(f"XSStrike completed successfully for {end_point}")
            except Exception as e:
                errors.append(end_point)
        return [errors,reports]


