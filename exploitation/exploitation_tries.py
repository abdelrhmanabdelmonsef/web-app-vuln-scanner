import subprocess
import os
from Operations import Operations

class exploitation:
    def __init__(self, end_points=[], requests=None):
        self.end_points = end_points
        self.requests = requests

    def XSStrike(self, flags={}):
        errors = []
        output_dir = "exploitation/xsstrike"
        Operations.mkdir(output_dir)  # Ensure output directory exists
        print("Starting XSStrike ...\n=======================")
        reports=[]
        for end_point in self.end_points:
            # domain_name = end_point.split('//')[-1].split('/')[0]
            # file_name = domain_name + "_" + end_point.split('/')[-1]
            # file_name=file_name[-30:]
            # #output_file = f"{output_dir}/{file_name}"
            # output_file = os.path.join(output_dir, f"{file_name}.txt")  
            # flags["--log-file"]=output_file
            
            flags["-u"] = f'"{end_point}"'
            
            str_flags = Operations.dic_to_str(flags, postfix=" ")
            
            command = f"python3 XSStrike/xsstrike.py {str_flags} 2> /dev/null"
            
            report={}
            
            try:
                proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, start_new_session=True)
                # proc = subprocess.run(command, shell=True)
                stdout, _ = proc.communicate()
                output_lines = stdout.decode('utf-8').strip().split('\n')
                payloads=[line.split(": ")[-1].split(" ")[0] for line in output_lines if "Vector" in line]
                report[end_point]=payloads
                reports.append(report)
                # if proc.returncode != 0:
                #     errors[file_name] = f"Sub Process Error: {stderr.decode().strip()}"
                #     # print(f"Error running XSStrike on {end_point}: {stderr.decode().strip()}")
                # else:
                #     print(f"XSStrike completed successfully for {end_point}")
            except Exception as e:
                errors.append(end_point)
        return [errors,reports]


# Example endpoints
endpoints = ["http://testphp.vulnweb.com/listproducts.php?cat=123","https://github.com"]

# Example flags
flags = {
      # delay of 5 seconds
    "-t": "10" ,
     "--crawl":"-l 1" # use 10 threads
    ,
    "--file-log-level": "INFO"
}

# Create an instance of the exploitation class
exploit = exploitation(end_points=endpoints)

# Run the XSStrike method
errors,r = exploit.XSStrike(flags=flags)

# Check for any errors
if errors:
    print("Errors encountered:")
    for file_name, error in errors.items():
        print(f"{file_name}: {error}")
else:
    print("XSStrike executed successfully for all endpoints.")
    print(r)