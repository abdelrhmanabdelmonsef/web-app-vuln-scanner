import os
import sys
sys.path.insert(0,os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))
print(sys.path)
# sys.path.insert(0,os.path.abspath(os.path.join(os.path.dirname(__file__), 'recon/ip_resolver')))
import methods
import threads
import api
print('before starting')
class nuclei:

    def __init__(self,endpoint=[]):
        self.end_points=endpoint
        self.errors = []
        self.reports={}

    def run_nuclei(self,end_point,flags,id):
        print('in run')
        flags["-u"] = end_point
        str_flags = methods.dic_to_str(flags, postfix=" ")
        command = f"nuclei {str_flags} -nc 1>nuclei_out{id}.txt 2> /dev/null"
        print(command)
        _,output,error=methods.execute_command(command)
        lines = methods.get_file_content("nuclei_out{id}.txt","\n")
        if lines:
            report=api.reporting(lines,"for high , medium and low risk vuln mention all details ,create a markdown report")
            self.reports[end_point]=report
        # methods.rm(f"nuclei_out{id}.txt")
    
    def nuclei(self, flags={}):
        print('in nuclei')
        thread_objects = []
        counter=1
        for end_point in self.end_points:
            t = threads.thread(self.run_nuclei,args=(end_point,flags,counter))
            counter += 1
            thread_objects.append(t)
        for obj in thread_objects:
            obj.join()
        


print('in program')
nuc=nuclei(["https://0a860053045821b783109b8c00eb00b7.web-security-academy.net/image?filename=25.jpg"])
nuc.nuclei()
print(f"nuclei report: {nuc.reports} \n\n nuclei error: {nuc.errors}")
