import os
import sys
sys.path.insert(0,os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import methods
import threads
import time
class sqlmap:

    def __init__(self, end_points=[], threads=1, delay=0):
        self.end_points = end_points
        self.reports = {}
        self.errors={'end_points':[], 'general':None}
        self.threads=threads
        self.delay=delay
        self.sqlmap_dir =  'vulnerabilities/sqlmap'
        methods.mkdir('vulnerabilities/sqlmap')

    def get_domain(self,end_point):
        return end_point.split('//')[-1].split('/')[0]
    
    def str_flags(self,flags,end_point):
        flags["-u"] = f'"{end_point}"'
        flags["--output-dir"]=self.sqlmap_dir
        return methods.dic_to_str(flags,postfix=' ')

    def sqlmap_execute(self,str_flags,end_point):
        command = f"sqlmap {str_flags} -b  --batch --disable-coloring --os-shell --os-pwn --random-agent --risk 3 --level 5 2> /dev/null"
        print(command)
        methods.execute_command(command)
        lines = methods.get_file_content(f"{self.sqlmap_dir}/{self.get_domain(end_point)}/log",'\n')
        print('Lines: ',lines)
        if lines:
            return lines
        else:
            return False
        
    def sqlmap(self,end_point,flags={}):
        str_flags = self.str_flags(flags, end_point)
        output=self.sqlmap_execute(str_flags,end_point)
        if output:
            self.reports[end_point]=output
        else:
            self.errors['end_points'].append(end_point)
    
    def lsqlmap(self, flags={}):
        print("[‚óè] Vulnerabilities Scanning  -  sqlmap")
        try:
            iterations = len(self.end_points) // self.threads + 1
            for i in range(0,iterations):
                thread_objects = []
                for end_point in self.end_points:
                    t = threads.thread(self.sqlmap,(end_point,flags))
                    thread_objects.append(t)
                for obj in thread_objects:
                    obj.join()
                time.sleep(self.delay)
            methods.rmdir('vulnerabilities',True)
        except Exception as e:
            self.errors['general'] = e  





